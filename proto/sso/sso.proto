/*
    Общая информация: версия протокола, пакет и опции для генерации go-файлов
    Сервисы: по сути, это аналогии интерфейсам в Go — описание сигнатур методов, которые сервис должен реализовать
    Формат сообщений: объекты, которые методы сервисов будут принимать и возвращать
*/

// Версия ProtoBuf
syntax = "proto3";

// Текущий пакет - указывает пространство имен для сервиса и сообщений. Помогает избегать конфликтов имен.
package auth;

// Настройки для генерации Go кода.
option go_package = "serj.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {  
    // Register registers a new user.
    rpc Register (RegisterRequest) returns (RegisterResponse);

    // Login logs in a user and returns an auth token.
    rpc Login(LoginRequest) returns (LoginResponse);
}

// TODO: На будущее, следующий сервис можно описать прямо здесь,
// либо вынести в отдельный файл
// service Permissions {
//    GetUserPermissions(GetUserPermissionsRequest) return UserPermissions
// }

// Объект, который отправляется при вызове RPC-метода (ручки) Register.
message RegisterRequest {
    string email = 1; // // Email of the user to register.
    string password = 2; // Password of the user to register.
}

// Объект, который возвращается при вызове RPC-метода (ручки) Register.
message RegisterResponse {
    int64 user_id = 1; // User ID of the registered user.
}


message LoginRequest {
    string email = 1; 
    string password = 2;
    int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
    string token = 1;
}